{"version":3,"file":"static/js/278.89a80374.chunk.js","mappings":"gRAoFA,UA5Ee,WAAO,IAAD,EACXA,GAAWC,EAAAA,EAAAA,MACjB,GAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,MAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAA4CN,EAAAA,EAAAA,UAAS,MAArD,eAAOO,EAAP,KAAuBC,EAAvB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAM,UAAGF,EAAaG,IAAI,iBAApB,QAAiC,GAEvCC,EAAmBC,EAAAA,GAAW,CAChCC,YAAaD,EAAAA,KAAaE,cAI9BC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,mCAAG,uFACH,KAAXP,EADc,iEAGVR,EAAU,MACVI,EAAkB,MAClBN,GAAW,SAAAkB,GAAW,OAAKA,CAAL,IALZ,UAMSC,EAAAA,EAAAA,IAAaT,GANtB,OAOkB,KADtBU,EANI,QAODC,QAAQC,OACbhB,EAAkB,eAAD,OAAgBI,KAEjCR,EAAUkB,EAAKC,SACff,EAAkB,OAXZ,kDAcdF,EAAS,KAAMmB,SAdD,yBAgBVvB,GAAW,SAAAkB,GAAW,OAAKA,CAAL,IAhBZ,6EAAH,qDAmBfD,GAEH,GAAE,CAACP,IAMJ,OAAO,6BACH,SAAC,KAAD,CAAQc,cAAe,CAAEV,YAAa,IAClCF,iBAAkBA,EAClBa,SAAU,SAACC,EAAD,GAA0B,IAAhBC,EAAe,EAAfA,WAPX,SAAC,GAAmB,IAAlBb,EAAiB,EAAjBA,YACfL,EAAgC,KAAhBK,EAAqB,CAAEJ,OAAQI,GAAgB,CAAC,EACnE,CAMWW,CAASC,GACTC,GACX,EALG,UAMI,UAAC,KAAD,YACI,SAAC,KAAD,CAAOC,KAAK,OACRC,KAAK,cACLC,aAAa,MACbC,WAAS,EACTC,YAAY,iBAChB,mBAAQJ,KAAK,SAAb,UACI,SAAC,MAAD,WAIX7B,IAAW,SAAC,IAAD,IACXI,IAAS,wCACTE,IAAkB,yBAAOA,KAClB,OAANJ,QAAM,IAANA,OAAA,EAAAA,EAAQqB,QAAS,IAAK,+BACpB,wBAAKrB,EAAOgC,KAAI,SAAAC,GACZ,IAAMC,EAAUD,EAAKE,GACrB,OAAO,yBACH,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAWG,MAAO,CAAEC,KAAM3C,GAA/C,SAA6DsC,EAAKM,SADtDN,EAAKE,GAGxB,UAMZ,C","sources":["pages/Movies/Movies.jsx"],"sourcesContent":["import { Field, Form, Formik } from \"formik\";\nimport * as Yup from 'yup';\nimport { FcSearch } from \"react-icons/fc\";\nimport { Link, useLocation, useSearchParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { searchByName } from \"services/Api\";\nimport { Loading } from \"components/Loading/Loading\";\n\nconst Movies = () => {\n    const location = useLocation();\n    const [loading, setLoading] = useState(false);\n    const [movies, setMovies] = useState(null);\n    const [error, setError] = useState(null);  \n    const [searchNotFound, setSearchNotFound] = useState(null);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const search = searchParams.get('search') ?? '';\n\n    const validationSchema = Yup.object({\n        searchValue: Yup.string().required(),\n});\n    \n\n    useEffect(() => { \n        const fetchData = async () => {\n        if (search === '') { return }\n            try {                \n                setMovies(null);\n                setSearchNotFound(null);\n                setLoading(prevLoading => !prevLoading);\n                const data = await searchByName(search);\n                if (data.results.length === 0) {\n                    setSearchNotFound(`can't found ${search}`)\n                } else {\n                    setMovies(data.results);\n                    setSearchNotFound(null);\n                }           \n        } catch (error) {\n            setError(error.message);\n        }finally {\n                setLoading(prevLoading => !prevLoading);\n            }\n        };\n        fetchData();\n        \n    }, [search]);\n    \n    const onSubmit = ({searchValue}) => {        \n        setSearchParams(searchValue !== '' ? { search: searchValue } : {});        \n    }\n\n    return <main>        \n        <Formik initialValues={{ searchValue: '' }}\n            validationSchema={validationSchema}\n            onSubmit={(values, {resetForm}) => {\n                onSubmit(values);\n                resetForm();\n    }}>\n            <Form>\n                <Field type=\"text\"\n                    name=\"searchValue\"\n                    autoComplete=\"off\"\n                    autoFocus\n                    placeholder=\"Search film\"/>\n                <button type=\"submit\">\n                    <FcSearch/>\n                </button>\n            </Form>\n        </Formik>\n        {loading && <Loading />}\n        {error && <div>Sorry, ...</div>}\n        {searchNotFound && <div>{ searchNotFound }</div>}\n        { movies?.length > 0 && <>            \n            <ul>{movies.map(item => {\n                const movieId = item.id;\n                return <li key={item.id}>\n                    <Link to={`/movies/${movieId}`} state={{ from: location }} >{item.title}</Link>\n                </li>\n            })}\n            </ul>\n\n            </> \n        }         \n    </main>\n};\nexport default Movies;"],"names":["location","useLocation","useState","loading","setLoading","movies","setMovies","error","setError","searchNotFound","setSearchNotFound","useSearchParams","searchParams","setSearchParams","search","get","validationSchema","Yup","searchValue","required","useEffect","fetchData","prevLoading","searchByName","data","results","length","message","initialValues","onSubmit","values","resetForm","type","name","autoComplete","autoFocus","placeholder","map","item","movieId","id","to","state","from","title"],"sourceRoot":""}